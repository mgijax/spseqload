#format: sh
#
#  Configuration common to TrEMBL and SwissProt spseqload
#
#  This file sets up environment variables that common to both
#  SwissProt and TrEMBL Sequence loads
# 
#  IMPORTANT: This file is dependent on FILEDIR set in both spseqload.config
#             or trseqload.config
###########################################################################
#
#  If the MGICONFIG environment variable does not have a local override,
#  use the default "live" settings.
#
if [ "${MGICONFIG}" = "" ]
then
    MGICONFIG=/usr/local/mgi/live/mgiconfig
    export MGICONFIG
fi

. ${MGICONFIG}/master.config.sh

###########################################################################
#
#  GENERAL SETTINGS
#
###########################################################################

#  Installation directory for the SwissProt sequence load
INSTALLDIR=${DATALOAD}/spseqload

export INSTALLDIR 

###########################################################################
#
#  JAVA SETTINGS
#
###########################################################################

# allow 2G initial and max heap memory
JAVARUNTIMEOPTS="-Xms2G -Xmx2G"    

JAVA_LIB=${MGI_JAVALIB}/core.jar:${MGI_JAVALIB}/dbsmgd.jar:${MGI_JAVALIB}/dbsrdr.jar:${MGI_JAVALIB}/dla.jar

CLASSPATH=.:${INSTALLDIR}/spseqload.jar:${JAVA_LIB}:${COMMON_CLASSPATH}

export JAVARUNTIMEOPTS JAVA_LIB CLASSPATH

###########################################################################
#
#  LOAD SPECIFIC SETTINGS
#
###########################################################################

#
# output file settings
#

# Full path the the logs, reports, and archive directories
# FILEDIR defined in specific config file
LOGDIR=${FILEDIR}/logs
RPTDIR=${FILEDIR}/reports
OUTPUTDIR=${FILEDIR}/output
ARCHIVEDIR=${FILEDIR}/archive

export LOGDIR RPTDIR OUTPUTDIR ARCHIVEDIR 

#
# input file settings
#

#  Frameworks expects the value 'STDIN' if jobstream script pipes input to
#  the application.
INFILE_NAME=STDIN

# how files are piped to the application
APP_CAT_METHOD="/usr/local/bin/gunzip -c"

# true = regex matching for finding record delim is turned on
INFILE_USE_REGEX=true

# SwissProt sequence record regex begin and end delimiter
INFILE_BEGIN_DELIMITER="^ID"
INFILE_END_DELIMITER="^SQ"

# SwissProt sequence record String begin and end delimiter
# Note: Using string delims causes first record to be skipped if
# there is not a header
#INFILE_BEGIN_DELIMITER=ID
#INFILE_END_DELIMITER=SQ

# buffersize in bytes used by nio.ByteBuffer
# 21,000,000 = ~20 MB
INFILE_BUFFERSIZE=21000000

export INFILE_NAME APP_CAT_METHOD INFILE_USE_REGEX INFILE_BEGIN_DELIMITER 
export INFILE_END_DELIMITER INFILE_BUFFERSIZE

#
# general settings
#

 # Java applications
DLA_LOADER=org.jax.mgi.app.spseqloader.SPSeqloader
DLA_START=org.jax.mgi.shr.dla.loader.DLAStart

# SQL STREAM
# this overrides the default BCP_Inline_Stream
DLA_LOAD_STREAM=org.jax.mgi.shr.dbutils.dao.BCP_Script_Stream
DLA_QC_STREAM=org.jax.mgi.shr.dbutils.dao.BCP_Stream

# prefix of Configuration variable names for the load database
# e.g. prefixes DBSERVER, DBNAME, BCP_PATH, etc
DLA_DB_PREFIX=MGD

# seqloader QC report script
APP_SEQ_QCRPT=${QCRPTS}/seqload/runQC.csh

# molecular source processor QC report script
APP_MSP_QCRPT=${QCRPTS}/msp/runQC.csh

export DLA_LOADER DLA_START DLA_LOAD_STREAM DLA_QC_STREAM
export DLA_DB_PREFIX APP_SEQ_QCRPT APP_MSP_QCRPT

# incremental, incremental_initial, or delete_reload
# incremental_initial uses no event detections - add only
SEQ_LOAD_MODE=delete_reload

# Don't use associated clones to determine swissprot/trembl sequence source
MS_OK_TO_SEARCH_ASSOC_CLONES=false

# path to repeat file; file spseqload writes sequences found more than
# once in the input
SEQ_REPEAT_FILE=${OUTPUTDIR}/repeats.out

export SEQ_LOAD_MODE MS_OK_TO_SEARCH_ASSOC_CLONES SEQ_REPEAT_FILE

# number of existing sequences to batch before processing
SEQ_QUERY_BATCHSIZE=400

export SEQ_QUERY_BATCHSIZE

# SEQ_Sequence sequence type controlled vocab for protein
SEQ_TYPE=Polypeptide

# true if a virtual (computationally derived) sequence
SEQ_VIRTUAL=true


export SEQ_TYPE SEQ_VIRTUAL

# organisms to load
SEQ_LOAD_MOUSE=true
SEQ_LOAD_RAT=false
SEQ_LOAD_HUMAN=false

export SEQ_LOAD_MOUSE SEQ_LOAD_RAT SEQ_LOAD_HUMAN

#  Complete path name of the log files
LOG_PROC=${LOGDIR}/spseqload.proc.log
LOG_DIAG=${LOGDIR}/spseqload.diag.log
LOG_CUR=${LOGDIR}/spseqload.cur.log
LOG_VAL=${LOGDIR}/spseqload.val.log

# Send debug messages to the diagnostic log
# toggle these to true as needed
LOG_DEBUG=false
DBDEBUG=false
CACHE_DEBUG=false

# logger factory class - allows classes to get their own loggers
LOG_FACTORY=org.jax.mgi.shr.dla.log.DLALoggerFactory

export LOG_PROC LOG_DIAG LOG_CUR LOG_VAL LOG_DEBUG DBDEBUG
export CACHE_DEBUG LOG_FACTORY

###########################################################################
#
#  BCP MANAGER SETTINGS BY DATABASE
#
###########################################################################

#  Settings used to create a BCP manager for the MGD database
MGD_BCP_PATH=${OUTPUTDIR}
MGD_BCP_PREVENT_EXECUTE=false
MGD_BCP_TRUNCATE_LOG=true
MGD_BCP_DROP_INDEXES=false
MGD_BCP_RECORD_STAMPING=false
MGD_BCP_AUTO_FLUSH=false
MGD_BCP_OK_TO_OVERWRITE=false

export MGD_BCP_PATH MGD_BCP_PREVENT_EXECUTE MGD_BCP_TRUNCATE_LOG
export MGD_BCP_DROP_INDEXES MGD_BCP_RECORD_STAMPING MGD_BCP_AUTO_FLUSH
export MGD_BCP_OK_TO_OVERWRITE

#  Settings used to create a BCP manager for the MGD database
RADAR_BCP_PATH=${OUTPUTDIR}
RADAR_BCP_PREVENT_EXECUTE=false
RADAR_BCP_TRUNCATE_LOG=true
RADAR_BCP_DROP_INDEXES=false
RADAR_BCP_RECORD_STAMPING=false
RADAR_BCP_AUTO_FLUSH=true
RADAR_BCP_OK_TO_OVERWRITE=false

export RADAR_BCP_PATH RADAR_BCP_PREVENT_EXECUTE RADAR_BCP_TRUNCATE_LOG
export RADAR_BCP_DROP_INDEXES RADAR_BCP_RECORD_STAMPING RADAR_BCP_AUTO_FLUSH
export RADAR_BCP_OK_TO_OVERWRITE

###########################################################################
#
#  SQL SCRIPTWRITER SETTINGS FOR merges and splits
#    Provided if we ever get non-cum updates from SwissProt to process
#   in incremental mode
###########################################################################

# setting used to create a ScriptWriter for the merges and split
MGD_SCP_PATH=${MGD_BCP_PATH}
MGD_SCP_PREVENT_EXECUTE=true
MGD_SCP_OK_TO_OVERWRITE=false

MGD_SCP_FILENAME=mergeSplits

#MGD_SCP_SUFFIX=
MGD_SCP_OUTFILENAME=mergeSplits
#MGD_SCP_OUTSUFFIX=

export MGD_SCP_PATH MGD_SCP_PREVENT_EXECUTE MGD_SCP_OK_TO_OVERWRITE
export MGD_SCP_FILENAME MGD_SCP_SUFFIX MGD_SCP_OUTFILENAME MGD_SCP_OUTSUFFIX

###########################################################################
#
#  SQL SCRIPTWRITER SETTINGS FOR updates
#  Provided if we ever get non-cum updates from SwissProt to process
#   in incremental mode
###########################################################################

# setting used to create a ScriptWriter to do MGD database updates
SCP_PATH=${MGD_BCP_PATH}
SCP_PREVENT_EXECUTE=true
SCP_OK_TO_OVERWRITE=false

SCP_FILENAME=updates

#SCP_SUFFIX=
SCP_OUTFILENAME=updates
#SCP_OUTSUFFIX=

export SCP_PATH SCP_PREVENT_EXECUTE SCP_OK_TO_OVERWRITE
export SCP_FILENAME SCP_SUFFIX SCP_OUTFILENAME SCP_OUTSUFFIX

###########################################################################
#
#  MISCELLANEOUS SETTINGS
#
###########################################################################

#  Recipient list for mailing the curation log file (comma-separated)
MAIL_LOG_CUR="sc"

export MAIL_LOG_CUR
